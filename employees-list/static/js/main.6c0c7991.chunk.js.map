{"version":3,"sources":["core/enums/gender.ts","components/Tag/index.tsx","components/EmployeeRow/index.tsx","components/EmployeesList/index.tsx","components/EmployeeForm/index.tsx","core/store/store.tsx","core/store/employeesStore.ts","App.tsx","index.tsx"],"names":["Gender","Tag","value","status","className","EmployeeRow","employee","selected","onClick","name","gender","Male","position","dateOfBirth","toLocaleDateString","isFired","EmployeesList","employees","onRowSelection","style","width","textAlign","map","index","key","EmployeeForm","onEmployeeEdit","useState","formErrors","setFormErrors","onFormChange","e","target","errors","length","onNameChange","onPositionChange","onGenderChange","Number","parseInt","onDateChange","onFiredChange","date","Date","noValidate","htmlFor","type","onChange","required","id","checked","Female","toISOString","substring","store","employeesStore","observable","action","push","filter","i","StateContext","React","createContext","StateProvider","children","Provider","App","useContext","setSelected","useObserver","selectedEmployee","addEmployee","onEmployeeCreate","undefined","removeEmployee","editEmployee","application","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c0c7991.chunk.js","sourcesContent":["export enum Gender {\r\n    Male = 0,\r\n    Female = 1\r\n}","import React from 'react';\r\n\r\nimport './styles.scss'\r\n\r\ntype TagProps = {\r\n    value: string;\r\n    status?: 'danger' | 'success'\r\n}\r\n\r\nexport const Tag: React.FC<TagProps> = ({value, status}) => {\r\n\r\n    return (\r\n        <div className={\"tag \" + (status != null ? status : \"\")} >\r\n            {value}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Employee} from \"../../core/models/employee\";\r\n\r\nimport './styles.scss';\r\nimport {Tag} from \"../Tag\";\r\nimport {Gender} from \"../../core/enums/gender\";\r\n\r\ntype EmployeeRowProps = {\r\n    employee: Employee;\r\n    selected: boolean;\r\n    onClick(): void;\r\n}\r\n\r\nexport const EmployeeRow: React.FC<EmployeeRowProps> = ({employee, selected, onClick}) => {\r\n\r\n    return (\r\n        <tr className={selected ? \"employee employee-selected\" : \"employee\"} onClick={() => onClick()}>\r\n            <td className=\"employee_name\">\r\n                {employee.name}\r\n            </td>\r\n\r\n            <td className=\"employee_gender\">\r\n                {employee.gender != null\r\n                    ? employee.gender === Gender.Male\r\n                        ? \"М\"\r\n                        : \"Ж\"\r\n                    : \"\"}\r\n            </td>\r\n\r\n            <td className=\"employee_position\">\r\n                {employee.position}\r\n            </td>\r\n\r\n            <td className=\"employee_date\">\r\n                {employee.dateOfBirth != null\r\n                    ? employee.dateOfBirth.toLocaleDateString()\r\n                    : \"Не указан\"\r\n                }\r\n            </td>\r\n\r\n            <td className=\"employee_is-fired\">\r\n                {employee.isFired\r\n                    ? <Tag value='Уволен' status='danger'/>\r\n                    : <Tag  value='Работает' status='success'/>\r\n                }\r\n            </td>\r\n        </tr>\r\n    )\r\n}","import React from 'react';\r\nimport {Employee} from \"../../core/models/employee\";\r\nimport {EmployeeRow} from \"../EmployeeRow\";\r\n\r\nimport './styles.scss'\r\n\r\ntype EmployeesListProps = {\r\n    employees: Employee[]\r\n    selected: number | undefined\r\n    onRowSelection(index: number): void;\r\n}\r\n\r\nexport const EmployeesList: React.FC<EmployeesListProps> = ({employees, selected, onRowSelection}) => {\r\n\r\n    return (\r\n        <table className='employees'>\r\n            <thead className='employees-heading'>\r\n                <tr>\r\n                    <th style={{width: '35%'}}>ФИО</th>\r\n                    <th style={{width: '10%'}}>Пол</th>\r\n                    <th style={{width: '20%'}}>Должность</th>\r\n                    <th style={{width: '20%'}}>Дата рождения</th>\r\n                    <th style={{width: '15%', textAlign: 'center'}}>Статус</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n                {employees.map((employee, index) =>\r\n                    <EmployeeRow\r\n                        key={index}\r\n                        employee={employee}\r\n                        selected={selected === index}\r\n                        onClick={() => onRowSelection(index)}\r\n                    />)\r\n                }\r\n            </tbody>\r\n\r\n        </table>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport {Employee} from \"../../core/models/employee\";\r\n\r\nimport './styles.scss'\r\nimport {Gender} from \"../../core/enums/gender\";\r\n\r\ntype EmployeeFormProps = {\r\n    employee: Employee\r\n    onEmployeeEdit(employee: Employee): void;\r\n}\r\n\r\nexport const EmployeeForm: React.FC<EmployeeFormProps> = ({employee, onEmployeeEdit}) => {\r\n    const [formErrors, setFormErrors] = useState({name: '', position: ''})\r\n\r\n    const onFormChange = (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>) => {\r\n        const { name, value } = e.target;\r\n        const errors = {...formErrors}\r\n\r\n        switch (name) {\r\n            case \"name\":\r\n                errors.name = value.length === 0 ? \"Поле 'ФИО' не может быть пустым\" : \"\"\r\n                onNameChange(value)\r\n                break;\r\n            case \"position\":\r\n                errors.position = value.length === 0 ? \"Поле 'Должность' не может быть пустым\" : \"\"\r\n                onPositionChange(value)\r\n                break;\r\n            case \"gender\":\r\n                onGenderChange(Number.parseInt(value))\r\n                break;\r\n            case \"dateOfBirth\":\r\n                onDateChange(value);\r\n                break;\r\n            case \"isFired\":\r\n                onFiredChange();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        setFormErrors({...errors})\r\n    }\r\n\r\n    const onNameChange = (name: string) => onEmployeeEdit({...employee, name})\r\n    const onPositionChange = (position: string) => onEmployeeEdit({...employee, position})\r\n    const onGenderChange = (gender: Gender) => onEmployeeEdit({...employee, gender})\r\n    const onDateChange = (date: string) => onEmployeeEdit({...employee, dateOfBirth: new Date(date)})\r\n    const onFiredChange = () => onEmployeeEdit({...employee, isFired: !employee.isFired})\r\n\r\n    return (\r\n        <form className='employee-form' noValidate>\r\n            <div className=\"form-input required\">\r\n                <label htmlFor=\"name\">ФИО:</label>\r\n                <input name='name'\r\n                       type='text'\r\n                       className={formErrors.name.length > 0 ? \"is-invalid\" : \"\"}\r\n                       value={employee.name}\r\n                       onChange={(e) => onFormChange(e)}\r\n                       required\r\n                />\r\n                {formErrors.name.length > 0 && (\r\n                    <span className='form-input_invalid'>{formErrors.name}</span>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"form-input required\">\r\n                <label htmlFor=\"position\">Должность:</label>\r\n                <input name='position'\r\n                       type='text'\r\n                       className={formErrors.position.length > 0 ? \"is-invalid\" : \"\"}\r\n                       value={employee.position}\r\n                       onChange={e => onFormChange(e)}\r\n                       required\r\n                />\r\n                {formErrors.position.length > 0 && (\r\n                    <span className='form-input_invalid'>{formErrors.position}</span>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"form-input form-radio-group\">\r\n                <label htmlFor=\"gender\">Пол:</label>\r\n                <div>\r\n                    <input type=\"radio\"\r\n                           name=\"gender\"\r\n                           id=\"gender-male\"\r\n                           value={Gender.Male}\r\n                           checked={employee.gender === Gender.Male}\r\n                           onChange={e => onFormChange(e)}\r\n                    />\r\n                    <label htmlFor=\"gender-male\">Мужчина</label>\r\n                </div>\r\n\r\n                <div>\r\n                    <input type=\"radio\"\r\n                           name=\"gender\"\r\n                           id=\"gender-female\"\r\n                           value={Gender.Female}\r\n                           checked={employee.gender === Gender.Female}\r\n                           onChange={e => onFormChange(e)}\r\n                    />\r\n                    <label htmlFor=\"gender-female\">Женщина</label>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"form-input form-date\">\r\n                <label htmlFor=\"dateOfBirth\">Дата рождения:</label>\r\n                <input name='dateOfBirth'\r\n                       type='date'\r\n                       value={employee.dateOfBirth != null\r\n                           ? employee.dateOfBirth.toISOString().substring(0, 10)\r\n                           : (new Date()).toISOString().substring(0, 10)\r\n                       }\r\n                       onChange={e => onFormChange(e)}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"form-input form-checkbox\">\r\n                <label htmlFor=\"isFired\">Уволен:</label>\r\n                <input name='isFired'\r\n                       id=\"isFired\"\r\n                       type='checkbox'\r\n                       checked={employee.isFired}\r\n                       onChange={e => onFormChange(e)}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from 'react';\r\nimport {EmployeesStore} from \"./employeesStore\";\r\n\r\ntype State = {\r\n    employeesStore: EmployeesStore\r\n}\r\n\r\nconst store: State = {\r\n    employeesStore: new EmployeesStore()\r\n}\r\n\r\n\r\nconst StateContext = React.createContext<State>({} as State);\r\n\r\nexport const StateProvider: React.FC<React.PropsWithChildren<{}>> = ({children}) => {\r\n    return (\r\n        <StateContext.Provider value={store}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    );\r\n}\r\n\r\nexport const useRootState = () => React.useContext(StateContext);","import { observable, action } from 'mobx';\r\nimport {Employee} from \"../models/employee\";\r\n\r\nexport class EmployeesStore {\r\n    @observable\r\n    employees: Employee[] = [];\r\n\r\n    @action\r\n    addEmployee = (employee: Employee) => {\r\n        this.employees.push(employee)\r\n    }\r\n\r\n    @action\r\n    editEmployee = (index: number, employee: Employee) => {\r\n        this.employees[index] = employee;\r\n    }\r\n\r\n    @action\r\n    removeEmployee = (index: number) => {\r\n        this.employees = this.employees.filter((e, i) => i !== index)\r\n    }\r\n}","import React from 'react';\n\nimport {Employee} from \"./core/models/employee\";\nimport {EmployeesList} from \"./components/EmployeesList\";\nimport {EmployeeForm} from \"./components/EmployeeForm\";\n\nimport {useObserver} from 'mobx-react'\nimport {useRootState} from \"./core/store/store\";\n\nimport './App.scss';\n\nexport const App = () => {\n    const store = useRootState();\n\n    const [selected, setSelected] = React.useState<number | undefined>();\n\n    const onEmployeeCreate = (employee: Employee) => {\n        //validate current employee\n        if (selected != null) {\n            const selectedEmployee = {...store.employeesStore.employees[selected]}\n            if(selectedEmployee.name === \"\" || selectedEmployee.position === \"\") return;\n        }\n\n        //call mobx action\n        store.employeesStore.addEmployee(employee);\n        //set selected to last index\n        setSelected(store.employeesStore.employees.length - 1);\n    }\n    const onEmployeeRemove = (index: number) => {\n        //set selected to undefined\n        setSelected(undefined)\n        //call mobx action\n        store.employeesStore.removeEmployee(index)\n    }\n\n    const onEmployeeEdit = (index: number, employee: Employee) => {\n        //call mobx action\n        store.employeesStore.editEmployee(index, employee)\n    }\n\n    const onRowSelection = (index: number) => setSelected(index)\n\n    return useObserver(() => (\n        <div className=\"wrapper\">\n            <div className=\"heading\">\n                <ul>\n                    <li className=\"btn btn-success\"\n                        onClick={() =>\n                            onEmployeeCreate({name: \"Введите имя\", position: \"Введите должность\"})\n                        }\n                    >\n                        Добавить нового сотрудника\n                    </li>\n\n                    <li className={selected != null ? \"btn btn-success\" : \"btn btn-success btn-disabled\"}\n                        onClick={() => {\n                            if (selected != null) onEmployeeRemove(selected)\n                            else return;\n                        }}\n                    >\n                        Удалить выбранного сотрудника\n                    </li>\n                </ul>\n            </div>\n\n            <div className=\"sections\">\n                <div className=\"left-side\">\n                    <EmployeesList employees={store.employeesStore.employees}\n                                   selected={selected}\n                                   onRowSelection={i => onRowSelection(i)}\n                    />\n                </div>\n\n                <div className=\"right-side\">\n                    {selected != null\n                        ? <EmployeeForm employee={store.employeesStore.employees[selected]}\n                                        onEmployeeEdit={(e) => onEmployeeEdit(selected, e)}\n                        />\n                        : null\n                    }\n                </div>\n            </div>\n        </div>\n    ));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nimport {StateProvider} from \"./core/store/store\";\n\nconst application = (\n    <StateProvider>\n        <App />\n    </StateProvider>\n)\n\nReactDOM.render(application, document.getElementById('root'));\n"],"sourceRoot":""}